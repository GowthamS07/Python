#Functions are mini-programs in our program
#Print() displays the value passed to it
#input() lets user type in a value
#len() takes a string value & returns an integer value of the string's length
#int(), float(), and str() convert value data types

#Boolean Data Type: True, False
#Comparison Operators: ==, !=, >, >=, <, <=
#== is comparison, = is assignment
#Boolean Operators: and, or, not

#http://pythontutor.com/visualize.html#mode=edit : for debugging python code online

#An if statement can be used to conditionally execute code, depending on whether or not the if statement's condition is True or False.
#An elif (that is, "else if") statement can follow an if statement. Its block executes if its condition is True and all of the previous conditions have been False.
#An else statement comes at the end. It's block is executed if all of the previous conditions have been False.
#The values 0, 0.0, and the empty string sre considered to be Falsey values. When used in conditions they are considered False. We can always see for ourself which values are Truthy or Falsey by pasing them to the bool() function.

#When the execution reaches the end of a while statement's block, it jumps back to the start to re-check the condition.
#Press Ctrl+C to interrupt an infinite loop.
#A break statement causes the execution to immediately leave the loop, without re-checking the condition.
#A continue statement causes the execution to immediately jump back to the start of the loop & re-check the condition.

#for loops will loop a specific no. of times.
#The range() function called with one, two, or three arguments.
#break & continue can be used in for loops.

#You can import modules & get access to new functions.
#The modules that come with Python are called the standard library, but you can also install 3rd party modules using the pip tool. e.g. pyperclip.
#The sys.exit() function will immediately quit your program.
#The pyperclip 3rd party module has copy() & paste() functions for reading & writing text to the clipboard.

########User Defined Functions##############
#Functions are like like a mini-program inside your program.
#The main point of functions is to get rid of duplicate code.
#The def statement defines a function.
#The input to functions are arguments. The output is the return value.
#The parameters are the variables in between the function's parentheses in the def statement.
#The return value is specified using the return statement.
#Every function has a return value. If the function does not have a return statement, the default return value is None. 
#Keyword arguments to functions are usually for optional arguments. The print() function has keyword arguments end & sep. e.g.
  #>>> print('cat','dog','mouse',sep='FRIENDS') #output: catFRIENDSdogFRIENDSmouse
  #print('Hello',end='') print(' World') #output: Hello World

####################Global & local scopes.................
#A scope can be thought of as an area of the source code, and as a container of variables.
#The global scope is code outside of all functions. Variables assigned here are global variables. 
#Each function's code is in its own local scope. Variables assigned here are local variables.
#Code in the global scope can't use any local variables.
#Code in a function's local scope can't use variables in any another function's local scope.
#If there's an assignment statement for a variable in a function, that is a local variable.

###############################Try-except block...................
#A divide-by-zero error happens when Python divides a number by zero.
#Errors cause the program to crash.
#An error that happens inside a try block will cause code in the except block to execute. That code can handle the error or display a message to the user so that the program can keep going.
#e.g. numCats=input()
#try:
#  if numCats>=4:
#    print("sdfdsf")
#  else:
#    print("dffjdfhsd")
# except ValueError:
#  print("You didn't enter a number")

############################The List Data Data Type...............
spam = [['cat','bat'],[10,20,30,40,50]]
spam[0] #output: ['cat','bat']

spam = ['cat','bat','rat','elephant']
spam[1:3] #output: ['bat','rat']

spam = [10,20,30]
spam[1]='Hello'
spam #output: [10,'Hello',30]
spam[1:3] = ['CAT','DOG','MOUSE']
spam #output: [10,'CAT','DOG','MOUSE']

spam = ['cat','bat','rat','elephant']
spam[:2] #output: ['cat','bat']
spam[1:] #output: ['bat','rat','elephant']

del spam[2] 
spam #output: ['cat','bat','elephant']

[1,2,3]+[4,5,6] #output: [1,2,3,4,5,6]
'Hello '*3 #output: 'Hello Hello Hello'
[1,2,3]*3 #output: [1,2,3,1,2,3,1,2,3]

list('Hello') #output: ['H','e','l','l','o']

'howdy' in ['hello','hi','howdy','heyas'] #output: True
42 in ['hello','hi','howdy','heyas'] #output: False
'howdy' not in ['hello','hi','howdy','heyas'] #output: False

#You can get multiple items from the list using a slice.
#You can convert a value into a list by passing it to the list() function.


##########################For loops with Lists, Multiple Assignments, & Augmented Operators......
list(range(4)) #output: [0,1,2,3]

cat =   ['fat','orange','loud']
size=cat[0]
color = cat[1]
disposition = cat[2]

size, color, disposition = cat
size #output: 'fat'
color #output: 'orange'
disposition #output: 'loud'

#Multiple Assignments:
size, color, disposition = 'skinny','black','quiet'

#Swapping of items:
a = 'AAA'
b = 'BBB'
a,b = b,a
#Output: a = 'BBB' , b ='AAA'

#Augmented assignment....
a = 5
a+=1 #output: 6

#For loops technically iterate over the values in a list
# The range() function returns a list-like value, which can be passed to the list() function if you need an actual list value.


#####################List Methods................
#List has a method index to return item index. e.g. spam = ['hello','hi','howdy','heyas'], spam.index('hi') #output: 1
  #list.index() searches a string that is not in the list, it will throw a 'ValueError'
#List has append, insert, remove methods to  modify the list in place itself. e.g. spam =  ['fat','orange','loud'], spam.append('slow') #output:  ['fat','orange','loud','slow']
  #spam.insert(1,'light') #output:  ['fat','light','orange','loud']
  #spam.remove() removes the 1st item(only and not the other occurences of the removing item) from the list while del spam[] deletes the items based on index. e.g.  ['fat','orange','loud','fat','thin'] spam.remove('fat') #output: ['orange','loud','fat','thin']
#list.sort(), list.sort(reverse=True) methods to sort in ascending & descending order. 
# if a list containg hyrid data type items & then if we try to sort it will throw 'TypeError' exception. REASON: Python doesn't use alphabetical orderto sort rather uses 'ASCII-betical' order.
  #So to sort normally, pass key =str.lower. e.g. spam = ['a','z','A','Z'], spam.sort() => ['A','Z','a','z'], spam.sort(key = str.lower)=>['A','a','Z','z']
